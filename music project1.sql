CREATE  DATABASE MUSIC__INDUSTRY;
USE MUSIC__INDUSTRY;

#1
CREATE TABLE EMPLOYEES_TABLE(
    employee_id DECIMAL(38, 0), 
	last_name VARCHAR(8), 
	first_name VARCHAR(8), 
	title VARCHAR(22), 
	reports_to DECIMAL(38, 0), 
	levels VARCHAR(2), 
	birthdate VARCHAR(16), 
	hire_date VARCHAR(16), 
	address VARCHAR(27), 
	city VARCHAR(10), 
	state VARCHAR(2), 
	country VARCHAR(6), 
	postal_code VARCHAR(7), 
	phone VARCHAR(17), 
	fax VARCHAR(17), 
	email VARCHAR(27)
    );
    
SET SESSION SQL_MODE = '';

LOAD DATA INFILE 
"C:/employee.csv"
INTO TABLE EMPLOYEES_TABLE
FIELDS terminated by ','
enclosed by '"'
LINES terminated by '\n'
ignore 1 ROWS;

SELECT * FROM EMPLOYEES_TABLE;

#2
CREATE TABLE CUSTOMERS_TABLE(
customer_id DECIMAL(38, 0), 
	first_name VARCHAR(10), 
	last_name VARCHAR(13), 
	company VARCHAR(49), 
	address VARCHAR(41), 
	city VARCHAR(21), 
	state VARCHAR(6), 
	country VARCHAR(14), 
	postal_code VARCHAR(10), 
	phone VARCHAR(19), 
	fax VARCHAR(18), 
	email VARCHAR(29), 
	support_rep_id DECIMAL(38, 0)
    );
    
SET SESSION SQL_MODE = '';

LOAD DATA INFILE 
"C:/customer.csv"
INTO TABLE CUSTOMERS_TABLE
FIELDS terminated by ','
enclosed by '"'
LINES terminated by '\n'
ignore 1 ROWS;

SELECT* FROM CUSTOMERS_TABLE;

#3
CREATE TABLE GENRE_TABLE(
genre_id DECIMAL(38, 0), 
name_2 VARCHAR(18)
); 

SET SESSION SQL_MODE = '';

LOAD DATA INFILE 
"C:/genre.csv"
INTO TABLE GENRE_TABLE
FIELDS terminated by ','
enclosed by '"'
LINES terminated by '\n'
ignore 1 ROWS;

SELECT * FROM GENRE_TABLE;

#4
CREATE TABLE ARTIST_TABLE(
artist_id_2 DECIMAL(38, 0), 
 AR_name  VARCHAR(85)
 );
 
SET SESSION SQL_MODE = '';

LOAD DATA INFILE 
"C:/artist.csv"
INTO TABLE ARTIST_TABLE
FIELDS terminated by ','
enclosed by '"'
LINES terminated by '\n'
ignore 1 ROWS;

SELECT * FROM ARTIST_TABLE;

#5
CREATE TABLE ALBUM_TABLE(
album_id DECIMAL(38, 0), 
	title VARCHAR(95), 
	artist_id DECIMAL(38, 0)
    );
    
LOAD DATA INFILE 
"C:/album.csv"
INTO TABLE ALBUM_TABLE
FIELDS terminated by ','
enclosed by '"'
LINES terminated by '\n'
ignore 1 ROWS;

SELECT * FROM ALBUM_TABLE;

#6
CREATE TABLE PLAYLIST(
playlist_id DECIMAL(38, 0), 
	name_4 VARCHAR(26)
    );
    
LOAD DATA INFILE 
"C:/playlist.csv"
INTO TABLE PLAYLIST
FIELDS terminated by ','
enclosed by '"'
LINES terminated by '\n'
ignore 1 ROWS;

SELECT* FROM PLAYLIST;

#7
CREATE TABLE MEDIA_TABLE(
media_type_id DECIMAL(38, 0), 
	name_3 VARCHAR(27)
    );
    
LOAD DATA INFILE 
"C:/media_type.csv"
INTO TABLE MEDIA_TABLE
FIELDS terminated by ','
enclosed by '"'
LINES terminated by '\n'
ignore 1 ROWS;
  
SELECT * FROM MEDIA_TABLE;

#8
CREATE TABLE INVOICE(
invoice_id DECIMAL(38, 0), 
	customer_id_2 DECIMAL(38, 0), 
	invoice_date VARCHAR(16), 
	billing_address VARCHAR(41), 
	billing_city VARCHAR(21), 
	billing_state VARCHAR(6), 
	billing_country VARCHAR(14), 
	billing_postal_code VARCHAR(10), 
	total DECIMAL(38, 2)
    );
    
LOAD DATA INFILE 
"C:/invoice.csv"
INTO TABLE INVOICE
FIELDS terminated by ','
enclosed by '"'
LINES terminated by '\n'
ignore 1 ROWS; 
 
SELECT * FROM INVOICE;

#9
CREATE TABLE INVOICE_LINE(
invoice_line_id DECIMAL(38, 0), 
	invoice_id_2 DECIMAL(38, 0), 
	track_id DECIMAL(38, 0), 
	unit_price DECIMAL(38, 2), 
	quantity BOOL
    );
    
LOAD DATA INFILE 
"C:/invoice_line.csv"
INTO TABLE INVOICE_LINE
FIELDS terminated by ','
enclosed by '"'
LINES terminated by '\n'
ignore 1 ROWS; 
    
SELECT * FROM INVOICE_LINE;

#10
CREATE TABLE PLAYLIST_TRACK(
playlist_id_2 DECIMAL(38, 0) NOT NULL, 
	track_id_2 DECIMAL(38, 0) NOT NULL
    );
    
LOAD DATA INFILE 
"C:/playlist_track.csv" 
INTO TABLE PLAYLIST_TRACK
FIELDS terminated by ','
enclosed by '"'
LINES terminated by '\n'
ignore 1 ROWS; 
 
SELECT * FROM PLAYLIST_TRACK;

#11
CREATE TABLE TRACK_ID(
track_id_3 DECIMAL(38, 0), 
	name_5 VARCHAR(123), 
	album_id_2 DECIMAL(38, 0), 
	media_type_id_2 DECIMAL(38, 0), 
	genre_id_2 DECIMAL(38, 0), 
	composer VARCHAR(188), 
	milliseconds DECIMAL(38, 0), 
	bytes DECIMAL(38, 0), 
	unit_price_2 DECIMAL(38, 2)
    );
    
LOAD DATA INFILE 
"C:/track.csv"
INTO TABLE TRACK_ID
FIELDS terminated by ','
enclosed by '"'
LINES terminated by '\n'
ignore 1 ROWS; 

SELECT * FROM TRACK_ID;

#BASIC
#Q1
SELECT FIRST_NAME, LAST_NAME, TITLE FROM EMPLOYEES_TABLE WHERE TITLE = 'SENIOR GENERAL MANAGER'; 

#Q2
SELECT BILLING_COUNTRY, COUNT(INVOICE_ID) AS TOTAL_INVOICES FROM INVOICE 
GROUP BY BILLING_COUNTRY 
ORDER BY TOTAL_INVOICES DESC;

#Q3
SELECT INVOICE_ID, TOTAL
FROM INVOICE
ORDER BY TOTAL DESC
LIMIT 3;

#Q4
SELECT BILLING_CITY, SUM(TOTAL) AS TOTALINV FROM INVOICE 
GROUP BY BILLING_CITY 
ORDER BY TOTALINV DESC LIMIT 1;

#Q5
SELECT CUSTOMERS_TABLE.FIRST_NAME, CUSTOMERS_TABLE.LAST_NAME, SUM(INVOICE.TOTAL) AS TOTAL_SPENT
FROM CUSTOMERS_TABLE
JOIN INVOICE ON CUSTOMERS_TABLE.CUSTOMER_ID = INVOICE.CUSTOMER_ID_2
GROUP BY CUSTOMERS_TABLE.FIRST_NAME, CUSTOMERS_TABLE.LAST_NAME
ORDER BY TOTAL_SPENT DESC
LIMIT 1;

#MODERATE
#Q1
SELECT CUSTOMERS_TABLE.FIRST_NAME, CUSTOMERS_TABLE.LAST_NAME,CUSTOMERS_TABLE.EMAIL, GROUP_CONCAT(GENRE_TABLE.NAME_2) AS GENRES
FROM CUSTOMERS_TABLE
JOIN INVOICE ON CUSTOMERS_TABLE.CUSTOMER_ID = INVOICE.CUSTOMER_ID_2
JOIN INVOICE_LINE ON INVOICE.INVOICE_ID = INVOICE_LINE.INVOICE_ID_2
JOIN TRACK_ID ON INVOICE_LINE.TRACK_ID = TRACK_ID.TRACK_ID_3
JOIN GENRE_TABLE ON TRACK_ID.GENRE_ID_2 = GENRE_TABLE.GENRE_ID
WHERE UPPER(GENRE_TABLE.NAME_2) LIKE '%ROCK%'
GROUP BY CUSTOMERS_TABLE.FIRST_NAME, CUSTOMERS_TABLE.LAST_NAME,CUSTOMERS_TABLE.EMAIL
ORDER BY CUSTOMERS_TABLE.EMAIL ASC;

#Q2
SELECT ARTIST_TABLE.AR_NAME, COUNT(TRACK_ID.TRACK_ID_3) AS TRACK_COUNT
FROM ARTIST_TABLE
JOIN ALBUM_TABLE ON ARTIST_TABLE.ARTIST_ID_2 = ALBUM_TABLE.ARTIST_ID
JOIN TRACK_ID ON ALBUM_TABLE.ALBUM_ID = TRACK_ID.ALBUM_ID_2
JOIN GENRE_TABLE ON TRACK_ID.GENRE_ID_2 = GENRE_TABLE.GENRE_ID
WHERE UPPER(GENRE_TABLE.NAME_2) LIKE '%ROCK%'
GROUP BY ARTIST_TABLE.AR_NAME
ORDER BY TRACK_COUNT DESC
LIMIT 10;

#Q3
SELECT NAME_5, MILLISECONDS
FROM TRACK_ID
WHERE MILLISECONDS > (SELECT AVG(MILLISECONDS) FROM TRACK_ID)
ORDER BY MILLISECONDS DESC;

#ADVANCE
#Q1
SELECT CUSTOMERS_TABLE.CUSTOMER_ID, CUSTOMERS_TABLE.FIRST_NAME, CUSTOMERS_TABLE.LAST_NAME, ARTIST_TABLE.AR_NAME , SUM(INVOICE_LINE.UNIT_PRICE) AS TOTAL_SPENT
FROM INVOICE
JOIN INVOICE_LINE ON INVOICE.INVOICE_ID = INVOICE_LINE.INVOICE_ID_2
JOIN TRACK_ID ON INVOICE_LINE.TRACK_ID = TRACK_ID.TRACK_ID_3
JOIN ALBUM_TABLE ON TRACK_ID.ALBUM_ID_2 = ALBUM_TABLE.ALBUM_ID
JOIN ARTIST_TABLE ON ALBUM_TABLE.ARTIST_ID = ARTIST_TABLE.ARTIST_ID_2
JOIN CUSTOMERS_TABLE ON INVOICE.CUSTOMER_ID_2 = CUSTOMERS_TABLE.CUSTOMER_ID 
GROUP BY CUSTOMERS_TABLE.CUSTOMER_ID, CUSTOMERS_TABLE.FIRST_NAME, CUSTOMERS_TABLE.LAST_NAME, ARTIST_TABLE.AR_NAME 
ORDER BY TOTAL_SPENT DESC;

